{"ast":null,"code":"var _jsxFileName = \"/Users/anaventura/workspace/ahpsilva-app/src/components/carousel/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport { ChevronLeft, ChevronRight } from 'react-feather';\nimport { CarouselContainer } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrevArrow = props => {\n  const {\n    className,\n    onClick\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      children: /*#__PURE__*/_jsxDEV(ChevronLeft, {\n        size: 36\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PrevArrow;\n\nconst NextArrow = props => {\n  const {\n    className,\n    onClick\n  } = props;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      children: /*#__PURE__*/_jsxDEV(ChevronRight, {\n        size: 36\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = NextArrow;\nexport default function Carousel(props) {\n  _s();\n\n  const {\n    children\n  } = props;\n  const [activeIndex, setActiveIndex] = useState(0);\n  if (!children) return null;\n  const updateImage = useCallback(newIndex => {\n    let currentIndex = 0;\n\n    if (newIndex < 0) {\n      currentIndex = React.Children.count(children) - 1;\n    } else if (newIndex >= React.Children.count(children) - 1) {\n      currentIndex = 0;\n    }\n\n    setActiveIndex(currentIndex);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CarouselContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inner\",\n      style: {\n        transform: `translateX(-${activeIndex * 99}%)`\n      },\n      children: React.Children.map(children, (child, _index) => {\n        return /*#__PURE__*/React.cloneElement(child, {\n          width: \"33%\"\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"indicators\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateImage(activeIndex - 1),\n        children: \"prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), React.Children.map(children, (_child, index) => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => updateImage(index),\n          children: index + 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => updateImage(activeIndex + 1),\n        children: \"next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Carousel, \"k8+01EF4as8g5V44CTlGCNtJrYM=\");\n\n_c3 = Carousel;\n;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PrevArrow\");\n$RefreshReg$(_c2, \"NextArrow\");\n$RefreshReg$(_c3, \"Carousel\");","map":{"version":3,"sources":["/Users/anaventura/workspace/ahpsilva-app/src/components/carousel/index.tsx"],"names":["React","useState","useCallback","ChevronLeft","ChevronRight","CarouselContainer","PrevArrow","props","className","onClick","NextArrow","Carousel","children","activeIndex","setActiveIndex","updateImage","newIndex","currentIndex","Children","count","transform","map","child","_index","cloneElement","width","_child","index"],"mappings":";;;AAAA,OAAOA,KAAP,IAA8BC,QAA9B,EAAwCC,WAAxC,QAA2D,OAA3D;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,eAA1C;AACA,SAASC,iBAAT,QAAkC,UAAlC;;;AAWA,MAAMC,SAAS,GAAIC,KAAD,IAAqB;AACrC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAyBF,KAA/B;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEC,SAAhB;AAAA,2BACE;AAAQ,MAAA,OAAO,EAAEC,OAAjB;AAAA,6BACE,QAAC,WAAD;AAAa,QAAA,IAAI,EAAE;AAAnB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAVD;;KAAMH,S;;AAYN,MAAMI,SAAS,GAAIH,KAAD,IAAqB;AACrC,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAyBF,KAA/B;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEC,SAAhB;AAAA,2BACE;AAAQ,MAAA,OAAO,EAAEC,OAAjB;AAAA,6BACE,QAAC,YAAD;AAAc,QAAA,IAAI,EAAE;AAApB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAVD;;MAAMC,S;AAYN,eAAe,SAASC,QAAT,CAAkBJ,KAAlB,EAAgC;AAAA;;AAC9C,QAAM;AAAEK,IAAAA;AAAF,MAAeL,KAArB;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,CAAD,CAA9C;AAEA,MAAI,CAACW,QAAL,EAAe,OAAO,IAAP;AAGf,QAAMG,WAAW,GAAGb,WAAW,CAAEc,QAAD,IAAsB;AACrD,QAAIC,YAAY,GAAG,CAAnB;;AACA,QAAID,QAAQ,GAAG,CAAf,EAAkB;AAChBC,MAAAA,YAAY,GAAGjB,KAAK,CAACkB,QAAN,CAAeC,KAAf,CAAqBP,QAArB,IAAiC,CAAhD;AACD,KAFD,MAEO,IAAII,QAAQ,IAAIhB,KAAK,CAACkB,QAAN,CAAeC,KAAf,CAAqBP,QAArB,IAAiC,CAAjD,EAAoD;AACzDK,MAAAA,YAAY,GAAE,CAAd;AACD;;AACDH,IAAAA,cAAc,CAACG,YAAD,CAAd;AACA,GAR8B,EAQ5B,EAR4B,CAA/B;AAUC,sBACE,QAAC,iBAAD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,KAAK,EAAE;AAAEG,QAAAA,SAAS,EAAG,eAAcP,WAAW,GAAG,EAAG;AAA7C,OAA9B;AAAA,gBACGb,KAAK,CAACkB,QAAN,CAAeG,GAAf,CAAmBT,QAAnB,EAA6B,CAACU,KAAD,EAAQC,MAAR,KAAmB;AAC/C,4BAAOvB,KAAK,CAACwB,YAAN,CAAmBF,KAAnB,EAA0B;AAAEG,UAAAA,KAAK,EAAE;AAAT,SAA1B,CAAP;AACD,OAFA;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAE,MAAMV,WAAW,CAACF,WAAW,GAAG,CAAf,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAKGb,KAAK,CAACkB,QAAN,CAAeG,GAAf,CAAmBT,QAAnB,EAA6B,CAACc,MAAD,EAASC,KAAT,KAAmB;AAC/C,4BACE;AAAQ,UAAA,OAAO,EAAE,MAAMZ,WAAW,CAACY,KAAD,CAAlC;AAAA,oBACGA,KAAK,GAAG;AADX;AAAA;AAAA;AAAA;AAAA,gBADF;AAKD,OANA,CALH,eAYE;AAAQ,QAAA,OAAO,EAAE,MACfZ,WAAW,CAACF,WAAW,GAAG,CAAf,CADb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GA3CuBF,Q;;MAAAA,Q;AA2CvB","sourcesContent":["import React, { ReactElement, useState, useCallback } from 'react';\nimport { ChevronLeft, ChevronRight } from 'react-feather';\nimport { CarouselContainer } from './styles';\n\ntype Props = {\n  children: ReactElement[];\n};\n\ntype BtnProps = {\n  className: string;\n  onClick: () => {};\n}\n\nconst PrevArrow = (props: BtnProps) => {\n  const { className, onClick } = props;\n\n  return (\n    <div className={className}>\n      <button onClick={onClick}>\n        <ChevronLeft size={36} />\n      </button>\n    </div>\n  );\n};\n\nconst NextArrow = (props: BtnProps) => {\n  const { className, onClick } = props;\n\n  return (\n    <div className={className}>\n      <button onClick={onClick}>\n        <ChevronRight size={36} />\n      </button>\n    </div>\n  );\n};\n\nexport default function Carousel(props: Props) {\n const { children } = props;\n const [activeIndex, setActiveIndex] = useState(0);\n\n if (!children) return null;\n\n\n const updateImage = useCallback((newIndex: number) => {\n  let currentIndex = 0;\n  if (newIndex < 0) {\n    currentIndex = React.Children.count(children) - 1;\n  } else if (newIndex >= React.Children.count(children) - 1) {\n    currentIndex= 0;\n  }\n  setActiveIndex(currentIndex);\n }, [])\n\n  return (\n    <CarouselContainer>\n      <div className='inner' style={{ transform: `translateX(-${activeIndex * 99}%)`}}>\n        {React.Children.map(children, (child, _index) => {\n          return React.cloneElement(child, { width: \"33%\"});\n        })}\n      </div>\n      <div className='indicators'>\n        <button onClick={() => updateImage(activeIndex - 1)\n        }>\n          prev\n        </button>\n        {React.Children.map(children, (_child, index) => {\n          return (\n            <button onClick={() => updateImage(index)}>\n              {index + 1}\n            </button>\n          )\n        })}\n        <button onClick={() =>\n          updateImage(activeIndex + 1)}>\n          next\n        </button>\n      </div>\n    </CarouselContainer>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}